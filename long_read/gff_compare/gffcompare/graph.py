import pandas as pd
import matplotlib.pyplot as plt
from collections import OrderedDict
import os

#Reads multiple .tmap files generated by gffcompare.
#Extracts the class_code value assigned to each transcript (e.g., "i", "j", "u", "x").
#Counts the number of transcripts per class, using a predefined order (CLASS_ORDER).
#Calculates the percentage of each class relative to the total transcript count.
#Creates a side-by-side bar plot (subplot) comparing class code distributions across conditions (e.g., t0, t120, no-intronic).
#Saves the resulting figure as a PDF file (gffcompare_classcode_manual4.pdf).

# paths
TMAP_PATHS = {
    "t0 • With intronic": "/ref_t0_lyric_gff_compare.lyric_t0.gtf.tmap",
    "t120 • With intronic": "/ref_t120_lyric_gff_comparee.lyric_t120.gtf.tmap",
    "t0 • No-intronic": "/ref_t0_lyric_noI_gff_compare.lyric_t0.no_intronic.gtf.tmap",
    "t120 • No-intronic": "/ref_t120_lyric_noI_gff_compare.lyric_t120.no_intronic.gtf.tmap",
}

# Class codes
CLASS_ORDER = ["=", "c", "e", "i", "j", "k", "m", "n", "o", "p", "s", "u", "x", "y"]

def read_class_counts(tmap_path):
    df = pd.read_csv(tmap_path, sep="\t", dtype=str)
    class_col = "class_code" if "class_code" in df.columns else df.columns[2]
    counts = df[class_col].value_counts()
    total = counts.sum()

    ordered_counts = OrderedDict()
    for code in CLASS_ORDER:
        ordered_counts[code] = counts.get(code, 0)
    for code in counts.index:
        if code not in ordered_counts:
            ordered_counts[code] = counts[code]
    return ordered_counts, total

def plot_class_codes(tmap_paths, output_file):
    plt.figure(figsize=(14, 10))
    for i, (label, path) in enumerate(tmap_paths.items(), 1):
        counts, total = read_class_counts(path)
        classes = list(counts.keys())
        values = [100 * v / total for v in counts.values()]

        ax = plt.subplot(2, 2, i)
        bars = ax.bar(classes, values)
        ax.set_title(label)
        ax.set_xlabel("Class Code")
        ax.set_ylabel("Percentage")
        ax.set_ylim(0, max(values + [10]) * 1.15)

        for bar, val in zip(bars, values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5, f"{val:.1f}%", ha="center", va="bottom")

    plt.tight_layout()
    plt.savefig(output_file)
    print(f"[✓] PDF installed: {output_file}")

plot_class_codes(TMAP_PATHS, "gffcompare_classcode_manual4.pdf")
